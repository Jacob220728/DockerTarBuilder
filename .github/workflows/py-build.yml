name: Python build

on:
  workflow_dispatch:
    inputs:
      docker_images:
        description: '请填写docker镜像名称 多个用英文逗号分开'
        required: true
        default: 'python:3.12-slim'  # 设置默认的 Docker 镜像列表

jobs:
  pull_and_package:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Pull Docker Images and Package
      run: |
        images="${{ github.event.inputs.docker_images }}"
        IFS=',' read -r -a image_array <<< "$images"
        
        for image in "${image_array[@]}"; do
          docker pull "${image}"
          echo 'FROM python:3.12-slim' > Dockerfile
          echo 'RUN set -eux; \' >> Dockerfile
          echo 'apt-get update && apt-get install -y \ ' >> Dockerfile
          echo 'gcc  g++ make binutils \ ' >> Dockerfile
          echo '&& rm -rf /var/lib/apt/lists/* ' >> Dockerfile
          echo 'Flask' > requirements.txt
          echo 'Flask-RESTX' >> requirements.txt
          echo 'Flask-CORS' >> requirements.txt
          echo 'Werkzeug' >> requirements.txt
          echo 'numpy' >> requirements.txt
          echo 'scikit-learn' >> requirements.txt
          echo 'python-dateutil' >> requirements.txt
          echo 'gunicorn' >> requirements.txt
          echo 'pyinstaller' >> requirements.txt
          echo 'COPY requirements.txt /' >>  Dockerfile
          echo 'RUN pip install -r /requirements.txt' >>  Dockerfile
          cat requirements.txt
          cat Dockerfile
          docker build -t py-alg .
          docker save py-alg -o "${image//\//_}-py.tar"
        done

    - name: Compress the TAR files
      run: tar -czf py-images.tar.gz *-py.tar

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-images-tar
        path: py-images.tar.gz
        retention-days: 1  # 将保留天数设置为 1 天 最多可设置90天

    - name: Clean up intermediate files
      run: |
        rm *-py.tar
